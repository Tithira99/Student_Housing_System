/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studenthousing;

/**
 *
 * @author Tithira
 */
import java.util.ArrayList;
public class WaitingList extends javax.swing.JFrame {

    /**
     * Creates new form WaitingList
     */
    public WaitingList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idtxt = new javax.swing.JTextField();
        nametxt = new javax.swing.JTextField();
        sloctxt = new javax.swing.JTextField();
        MAPtxt = new javax.swing.JTextField();
        QTtxt = new javax.swing.JTextField();
        Qsize = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        CreateQ = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Search = new javax.swing.JButton();
        statustxt = new javax.swing.JLabel();
        KeepWaiting = new javax.swing.JButton();
        CheckAccom = new javax.swing.JButton();
        InsertAp = new javax.swing.JButton();
        statustxt1 = new javax.swing.JLabel();
        list1 = new java.awt.List();
        alid = new javax.swing.JButton();
        alID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        idcheck = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        AYtxt = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        idtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idtxtActionPerformed(evt);
            }
        });
        idtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idtxtKeyPressed(evt);
            }
        });

        QTtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QTtxtActionPerformed(evt);
            }
        });

        Qsize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QsizeActionPerformed(evt);
            }
        });
        Qsize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                QsizeKeyPressed(evt);
            }
        });

        Insert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Insert.setText("Insert");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        CreateQ.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CreateQ.setText("Create New Queue");
        CreateQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateQActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Student ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Searching Location");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Academic Year");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Maximum Amount can Pay");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Quality Threshold");

        Search.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        statustxt.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        statustxt.setForeground(new java.awt.Color(255, 0, 51));
        statustxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        KeepWaiting.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        KeepWaiting.setText("Keep Waiting");
        KeepWaiting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeepWaitingActionPerformed(evt);
            }
        });

        CheckAccom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CheckAccom.setText("Check for Accomation");
        CheckAccom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckAccomActionPerformed(evt);
            }
        });

        InsertAp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        InsertAp.setText("Add Apartment");
        InsertAp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertApActionPerformed(evt);
            }
        });

        statustxt1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        statustxt1.setForeground(new java.awt.Color(255, 51, 51));
        statustxt1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        list1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        list1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list1ActionPerformed(evt);
            }
        });

        alid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        alid.setText("Allocate");
        alid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alidActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Enter Apartment ID");

        idcheck.setForeground(new java.awt.Color(255, 51, 51));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Waiting List");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Number of Locations for the Queue");

        AYtxt.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idcheck, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(QTtxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(idtxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nametxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sloctxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(MAPtxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AYtxt))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(CheckAccom)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(alid, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(alID, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(26, 26, 26))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 218, Short.MAX_VALUE)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statustxt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Qsize, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CreateQ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(InsertAp, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(KeepWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(456, 456, 456)
                                .addComponent(jLabel8)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(statustxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InsertAp, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateQ, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(Qsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statustxt1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jLabel8)
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idcheck, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(sloctxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(AYtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(MAPtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(QTtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alid, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)))
                        .addComponent(CheckAccom, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeepWaiting, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
       public Queue q1;
   
      //Button Click for inserting a new Student to the Que
    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        list1.removeAll();
        statustxt.setText("");
        if("".equals(idtxt.getText())||"".equals(nametxt.getText())||"".equals(sloctxt.getText())||"".equals(AYtxt.getValue())||"".equals(MAPtxt.getText())||"".equals(QTtxt.getText())){
            statustxt.setText("Any of the attributes cannot be empty");//Checking Whether the input fields are empty
        }
        else if(q1==null){//checking whether the que is Created
            statustxt.setText("Create the Que!");
        }
        else if(Integer.parseInt(QTtxt.getText())>100||Integer.parseInt(QTtxt.getText())<0){//Checking whether the Quality Score is within the range
            statustxt.setText("Quality Score shoulbe within 0 to 100");
        }
        else{
            boolean Eavailable=false;//checking whether the inserted ID is already available
            for(int i=0;i<q1.getnstud();i++){
                int id=q1.getque(i).getid();
                if(Integer.toString(id).equals(idtxt.getText())){
                    Eavailable=true;
                }
            }

            if(Eavailable != true){
                Student s1=new Student(Integer.parseInt(idtxt.getText()), nametxt.getText(),sloctxt.getText(),AYtxt.getValue().toString(), Integer.parseInt(MAPtxt.getText()), Integer.parseInt(QTtxt.getText()));
                //Inserting the Student to the Que
                boolean status=q1.enque(s1);
                if(status==true){
                statustxt.setText(s1.getid()+" : "+s1.getnm()+ " has been Added to the Queue");
                idtxt.setText("");
                nametxt.setText("");
                sloctxt.setText("");
                MAPtxt.setText("");
                QTtxt.setText("");
                }
                else{
                statustxt.setText("Insertion failed/Que is Full!");
                }
            }
            else{
                statustxt.setText("Enter a Different ID!");
            }
        }
            
    }//GEN-LAST:event_InsertActionPerformed

    private void CreateQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateQActionPerformed
        statustxt.setText("");
     
       if(Qsize.getText().equals("")){
          statustxt1.setText("Enter the number of locations");
      }else{
      statustxt.setText("");
      statustxt1.setText("");
      try{
      Queue qq=new Queue(Integer.parseInt(Qsize.getText()));
      q1=qq;
      statustxt1.setText("Que has been Created");
      }catch(Exception ex){
          statustxt1.setText("Error in creating the que: "+ex);
      }
      }
     
    }//GEN-LAST:event_CreateQActionPerformed

    private void QTtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QTtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QTtxtActionPerformed

    private void QsizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QsizeActionPerformed
       
    }//GEN-LAST:event_QsizeActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
       //button click for Searching the Student in front of the Que 
       list1.removeAll();
        statustxt.setText("");
        try{
        Student s1=q1.peekFront();
        statustxt.setText(String.valueOf(s1.getid())+":- "+s1.getnm()+" is in the front of the Queue");
       }catch(Exception ex){
           statustxt.setText("Error in searching the Student: "+ex);
       }
       
       
     
    }//GEN-LAST:event_SearchActionPerformed

    private void KeepWaitingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeepWaitingActionPerformed
      //Button CLick for Keeping the Student in the front waited
        list1.removeAll();
        statustxt.setText("");
        try{
        Student st=q1.deque();
        q1.enque(st);
        statustxt.setText(st.getid()+":"+st.getnm()+ " has been added to the Back");
        }catch(Exception ex){
            statustxt.setText("Keep Waiting Failed");
        }
    }//GEN-LAST:event_KeepWaitingActionPerformed

    private void CheckAccomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckAccomActionPerformed
      //Button Click for Checking for a matching apartment for student in the front of the Que
      statustxt.setText("");
      try{
       
       ArrayList<Apartment> ar=Apartmentfrm.alist;
       list1.removeAll();
        boolean ApartmentFound=false;
     
        list1.removeAll();
        
        for(int i=0;i<ar.size();i++){
            if((ar.get(i).getAvbty()==true) && (ar.get(i).getRent()<= q1.peekFront().getMAP()) && (ar.get(i).getQsc() >= q1.peekFront().getQT())){
                
                list1.add("ID :- " +ar.get(i).getid());
                list1.add("Location :- " +ar.get(i).getloc());
                list1.add("Maximum number of Rooms :- " +Integer.toString(ar.get(i).getMaxR()));
                list1.add("Availability:- " +Boolean.toString(ar.get(i).getAvbty()));
                list1.add("Rent :- " +Integer.toString(ar.get(i).getRent()));
                list1.add("Quality Score :- " +Integer.toString(ar.get(i).getQsc()));
                list1.add("-----------------------------------------");
                ApartmentFound=true;
            }
         
           
         
        }
        if(ApartmentFound==false) {
           statustxt.setText("Apartment Not Found");
        }
      }catch(Exception ex){
          statustxt.setText("Check Apartment Failed");
      }
          
    }//GEN-LAST:event_CheckAccomActionPerformed
   
   
    private void InsertApActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertApActionPerformed
        //Button CLick to view the Apartment form
       
        Apartmentfrm.ob.show();
        Apartmentfrm.ob.setlist();
  
     
      
     
    }//GEN-LAST:event_InsertApActionPerformed

    private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list1ActionPerformed

    private void alidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alidActionPerformed
       //Button Click for allocating an apartment by ID for the Student in the front 
        statustxt.setText("");
       
        ArrayList<Apartment> ar=Apartmentfrm.alist;
        boolean allocated=false;
        for(int i=0;i<ar.size();i++){
               if(ar.get(i).getid().equals(alID.getText())){

                   ar.get(i).setAvbty(false);
                   Student StuDeleted=q1.deque();
                   if(StuDeleted != null){
                   
                   statustxt.setText("Apartment "+ar.get(i).getid()+ " has been allocated to "+StuDeleted.getid());
                   }
                   allocated=true;
                   break;
                   
               }
         
            
         
        }
         if(allocated==false){
            statustxt.setText("Apartment not Found");
        }
       
       list1.removeAll();
       for(int i=0;i<ar.size();i++){
           
                
                list1.add("ID :- " +ar.get(i).getid());
                list1.add("Location :- " +ar.get(i).getloc());
                list1.add("Maximum number of Rooms :- " +Integer.toString(ar.get(i).getMaxR()));
                list1.add("Availability:- " +Boolean.toString(ar.get(i).getAvbty()));
                list1.add("Rent :- " +Integer.toString(ar.get(i).getRent()));
                list1.add("Quality Score :- " +Integer.toString(ar.get(i).getQsc()));
                list1.add("-----------------------------------------");
               
            
         
           
         
        }
       
        alID.setText("");
       
        
    }//GEN-LAST:event_alidActionPerformed

    private void idtxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idtxtKeyPressed
        //Checking the Validity of the ID format(Checking whether it is an integer)by the key press on the text field
        try{
            
            int i=Integer.parseInt(idtxt.getText());
             idcheck.setText("");
            
                  
             
        }catch(NumberFormatException ex){
            if(idtxt.getText().equals("")){
                idcheck.setText("");
            }
            else{
            idcheck.setText("Invalid ID Format, Numbers only!");
            }
        }
          
    }//GEN-LAST:event_idtxtKeyPressed

    private void QsizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QsizeKeyPressed
       //Checking the validy of the n umber of Locations of the que(WHether it is an integer).
        try{
            
            int i=Integer.parseInt(Qsize.getText());
             statustxt1.setText("");
            
                  
             
        }catch(NumberFormatException ex){
            if(Qsize.getText().equals("")){
                statustxt1.setText("");
            }
            else{
                statustxt1.setText("Invalid input, Numbers only!");
            
            }
        }
    }//GEN-LAST:event_QsizeKeyPressed

    private void idtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idtxtActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WaitingList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WaitingList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WaitingList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WaitingList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WaitingList().setVisible(true);
            }
        });
        
         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner AYtxt;
    private javax.swing.JButton CheckAccom;
    private javax.swing.JButton CreateQ;
    private javax.swing.JButton Insert;
    private javax.swing.JButton InsertAp;
    private javax.swing.JButton KeepWaiting;
    private javax.swing.JTextField MAPtxt;
    private javax.swing.JTextField QTtxt;
    private javax.swing.JTextField Qsize;
    private javax.swing.JButton Search;
    private javax.swing.JTextField alID;
    private javax.swing.JButton alid;
    private javax.swing.JLabel idcheck;
    private javax.swing.JTextField idtxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private java.awt.List list1;
    private javax.swing.JTextField nametxt;
    private javax.swing.JTextField sloctxt;
    private javax.swing.JLabel statustxt;
    private javax.swing.JLabel statustxt1;
    // End of variables declaration//GEN-END:variables
}
